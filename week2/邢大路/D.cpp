//https://blog.csdn.net/qq_37747797/article/details/88783651 
#include<iostream>
#include<queue>
#include<cstdio>
#include<string>
#include<cstring>
using namespace std;

char map[501][501];  //存成字符型 
int vis[500][500];
/*
01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010101001000100010101
10100001000110010001000010101001110101011111010010
00000100101000000110010100101001100001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000
*/
int dir[4][2] = {
	{1, 0},      //下 
	{0, -1},     //左 
	{0, 1},      //右 
	{-1, 0}      //上 
};
char dic[4]= {'D','L','R','U'};

struct node {
	int x,y;
	int step;            //到达该节点的步数
	string path;          //到达该点路径
};

int x1,x2,y1,y2,n,m;      //(x1,y1)起点，(x2,y2）终点 

void bfs() {
	queue<node> q;
	node p;           //当前所在的节点
	p.x=x1;p.y=y1;p.step=0;p.path="";
	vis[x1][y1]=1;
	q.push(p);
	while(!q.empty()){
		node p=q.front();        //宽搜  队列待遍历节点 
		if(p.x==x2&&p.y==y2){
			if(p.step==0){
				
			} 
			cout<<p.step<<endl<<p.path;
		}
		node v;      //下一步所要去往的节点 
		for(int i=0;i<4;i++){      //依次四个方向遍历 
			v.x=p.x+dir[i][0];
			v.y=p.y+dir[i][1];
			if(v.x>=0&&v.y>=0&&v.x<n&&v.y<m&&vis[v.x][v.y]==0&&map[v.x][v.y]!='1'){  //不能重复访问且走得通 
				vis[v.x][v.y]=1;   //已访问 
				v.step=p.step+1;
				v.path=p.path+dic[i];
				q.push(v); 
			}
		}
		q.pop();
	}
}
int main() {
	n=30,m=50;
	memset(map,'1',sizeof(map));
	memset(vis,0,sizeof(vis));
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cin>>map[i][j];
		}
	}
	x1=0;y1=0;
	x2=n-1;y2=m-1;
	bfs();
	return 0;
}

