#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cstring>
#include<queue>

using namespace std;

const int maxn = 1000 + 5;

const int dr[] = { 1,0,0,-1 };//下，左，右，上
const int dc[] = { 0,-1,1,0 };

int pic[maxn][maxn]; 
int idx[maxn][maxn];

struct Node {
	int x, y, r;
	Node() = default;
	Node(int x, int y, int r) :
		x(x), y(y), r(r) {}
};

int n,m;
Node p[maxn][maxn][4];

void print_ans(Node u, int r1, int c1) {
	vector<Node>nodes;
	while (true) {
		nodes.emplace_back(u);
		if (u.x == r1 && u.y == c1)break;
		u = p[u.x][u.y][u.r];
	}
	for (int i = nodes.size()-1; i >= 0; i--)
	{
		if (nodes[i].r == 0)cout << "D";
		else if (nodes[i].r == 1)cout << "L";
		else if (nodes[i].r == 2)cout << "R";
		else if (nodes[i].r == 3)cout << "U";
	}
}

bool inside(int x, int y) {
	if (x < 1 || x >= m || y < 1 || y >= n || idx[x][y])return false;
	if (pic[x][y])return false;
	return true;
}


void bfs(int r2,int c2) {
	memset(idx, 0, sizeof(idx));
	queue<Node>q;
	Node u(1, 1, 0);
	idx[1][1] = 1;
	q.push(u);
	while (!q.empty()) {
		Node u = q.front(); q.pop();
		if (u.x == r2 && u.y == c2) { print_ans(u, 1, 1); return; }
		for (int i = 0; i < 4; i++)
		{
			Node v(u.x + dr[i], u.y + dc[i], i);
			if (inside(v.x, v.y)) {
				idx[v.x][v.y] = 1;
				p[v.x][v.y][v.r] = u;
				q.push(v);
			}
		}
	}
	cout << -1 << endl;
}


int main() {
	memset(pic, 0, sizeof(pic));
	string s;
	m = 1, n = 1;
	while (getline(cin, s)) {
		n = 1;
		for (auto &c : s) {
			pic[m][n++] = c - 48;
		}
		m++;
	};
	bfs(m-1,n-1);
}
/*
01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010101001000100010101
10100001000110010001000010101001110101011111010010
00000100101000000110010100101001100001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000
*/